#!/usr/bin/env python3

#
# SHA3-256 Implementation

import sys
import hashlib
import base64

def hash_algo():
    return hashlib.sha3_256()

def hash_stream(filestream, block_size=8192):
    hash = hash_algo()    
    for block in iter(lambda: filestream.read(block_size), b''):
        hash.update(block)
    return hash
        
def checksum_file(filename, block_size=8192):
    with open(filename, 'rb') as filestream:
        return hash_stream(filestream, block_size)
    raise RuntimeError('Invalid file ' + filename)

def output_hash(hash, is_base64):
    if is_base64:
        b64data = base64.b64encode(hash.digest())
        print(b64data.decode())
    else:
        print(hash.hexdigest())
    

def process_file(filename, is_base64=False):
    hash = checksum_file(file)
    output_hash(hash, is_base64)
    

if __name__ == '__main__':

    is_base64 = False
    if len(sys.argv) > 1:
        for file in sys.argv[1:]:
            if file == '--base64':
                is_base64 = True
            else:
                process_file(file, is_base64)